#!/usr/bin/python3

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QMainWindow, QAction, QFileDialog, QTableView, QHeaderView
import csv
import sys

from lib.TableModel import TableModel
from lib.Filter import Filter

class faultViewer(QMainWindow):
    def __init__(self):
        super().__init__()
        
        self.menuInit()

        self.view = QTableView(self)
        self.setCentralWidget(self.view)

        self.model = False
        self.hide = False

        if len(sys.argv) == 2:
            self.open(sys.argv[1])

        self.show()

    def menuInit(self):
        menu = self.menuBar()
        fileMenu = menu.addMenu('&File')
        openButton = QAction('&Open', self)
        openButton.triggered.connect(self.open)
        fileMenu.addAction(openButton)

        saveButton = QAction('&Save', self)
        saveButton.triggered.connect(self.save)
        fileMenu.addAction(saveButton)

        exportButton = QAction('&Export CSV', self)
        exportButton.triggered.connect(self.export)
        fileMenu.addAction(exportButton)

        viewMenu = menu.addMenu('&View')
        self.hideButton = QAction('&Hide Generated', self)
        self.hideButton.setEnabled(False)
        self.hideButton.setCheckable(True)
        self.hideButton.triggered.connect(self.hideToggle)
        viewMenu.addAction(self.hideButton)

        self.highlightButton = QAction('&Highlight Duplicates', self)
        self.highlightButton.setEnabled(False)
        self.highlightButton.setCheckable(True)
        self.highlightButton.triggered.connect(self.highlightToggle)
        viewMenu.addAction(self.highlightButton)

        self.fix100Button = QAction('&Fix first 100', self)
        self.fix100Button.setEnabled(False)
        self.fix100Button.setCheckable(True)
        self.fix100Button.triggered.connect(self.fix100Toggle)
        viewMenu.addAction(self.fix100Button)

    def open(self, f = None):
        if not f:
            path = QFileDialog.getOpenFileName(self)[0]
        else:
            path = f

        if path:
            self.model = TableModel(path)
            self.view.setModel(self.model)
            self.view.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
            self.view.horizontalHeader().setStretchLastSection(True)
            self.view.verticalHeader().setSectionResizeMode(QHeaderView.Fixed)
            self.view.verticalHeader().setDefaultSectionSize(15)
            self.view.setShowGrid(False)

        self.hideButton.setEnabled(True)
        self.highlightButton.setEnabled(True)
        self.fix100Button.setEnabled(True)

    def save(self):
        if self.model:
            self.model.save()

    def export(self):
        if self.model:
            path = QFileDialog.getSaveFileName(self)[0]
            if path:
                self.model.export(path)

    def hideToggle(self):
        self.hide = not self.hide
        if self.hide:
            self.filter = Filter(self)
            self.filter.setSourceModel(self.model)
            self.view.setModel(self.filter)
        else:
            self.view.setModel(self.model)

    def highlightToggle(self):
        self.model.highlightToggle()

    def fix100Toggle(self):
        self.model.fix100Toggle()

app = QApplication(sys.argv)

masterView = faultViewer()

sys.exit(app.exec_())
