#!/usr/bin/python3

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QMainWindow, QTreeWidget, QAction, QFileDialog, QTreeWidgetItem
import xml.etree.ElementTree as ET
import csv
import sys

class faultViewer(QMainWindow):
    def __init__(self):

        super().__init__()
        
        self.menuInit()

        self.treewidget = QTreeWidget()
        self.treewidget.setAlternatingRowColors(True)
        self.treewidget.setHeaderLabels(['Fault Number','Catagory','Suggested Text','Literal'])
        self.setCentralWidget(self.treewidget)

        if len(sys.argv) == 2:
            self.open(sys.argv[1])

        self.show()

    def menuInit(self):
        menu = self.menuBar()
        fileMenu = menu.addMenu('&File')
        openButton = QAction('&Open', self)
        openButton.triggered.connect(self.open)
        fileMenu.addAction(openButton)

        exportButton = QAction('&Export CSV', self)
        exportButton.triggered.connect(self.export)
        fileMenu.addAction(exportButton)

        viewMenu = menu.addMenu('&View')
        self.hideButton = QAction('&Hide Generated', self)
        self.hideButton.setEnabled(False)
        self.hideButton.setCheckable(True)
        self.hideButton.setChecked(False)
        self.hideButton.triggered.connect(self.hide)
        viewMenu.addAction(self.hideButton)

        self.highlightButton = QAction('&Highlight Duplicates', self)
        self.highlightButton.setEnabled(False)
        self.highlightButton.setCheckable(True)
        self.highlightButton.setChecked(False)
        self.highlightButton.triggered.connect(self.highlight)
        viewMenu.addAction(self.highlightButton)

        self.fix100Button = QAction('&Fix first 100', self)
        self.fix100Button.setEnabled(False)
        self.fix100Button.setCheckable(True)
        self.fix100Button.setChecked(False)
        self.fix100Button.triggered.connect(self.fix100)
        viewMenu.addAction(self.fix100Button)


    def open(self, f = None):
        if not f:
            path = QFileDialog.getOpenFileName(self)[0]
        else:
            path = f

        if path:
            XMLTree = ET.parse(path)
            root = XMLTree.getroot()

            self.faults = []

            for program in root.iter("Program"):
                for rung in program.iter("Rung"):
                    fault = self.getFault(program, rung)
                    if fault:
                        self.faults.append(fault)

            self.faults = sorted(self.faults, key=lambda fault : fault['number'])

            self.faults = self.genEmptyFaults(self.faults)

            self.faults = sorted(self.faults, key=lambda fault : fault['number'])

            self.faults = [self.catagoryFix(fault) for fault in self.faults]

            self.faults = [self.numberFix(fault) for fault in self.faults]

            self.draw()

            self.hideButton.setEnabled(True)
            self.highlightButton.setEnabled(True)
            self.fix100Button.setEnabled(True)

    def hide(self):
        if not self.hideButton.isChecked():
            root = self.treewidget.invisibleRootItem()
            count = root.childCount()
            for i in range(count):
                child = root.child(i)
                if child.text(1) == "":
                    child.setHidden(False)
            self.hideButton.setChecked(False)
        else:
            root = self.treewidget.invisibleRootItem()
            count = root.childCount()
            for i in range(count):
                child = root.child(i)
                if child.text(1) == "":
                    child.setHidden(True)
            self.hideButton.setChecked(True)

    def highlight(self):
        if not self.highlightButton.isChecked():
            root = self.treewidget.invisibleRootItem()
            count = root.childCount()

            for i in range(count):
                child = root.child(i)
                child.setBackground(0, Qt.white)

            self.highlightButton.setChecked(False)
        else:
            root = self.treewidget.invisibleRootItem()
            count = root.childCount()
            tmp = [x['number'] for x in self.faults]
            for i in range(count):
                child = root.child(i)
                if tmp.count(child.text(0)) != 1:
                    child.setBackground(0, Qt.red)

            self.highlightButton.setChecked(True)

    def export(self):
        path = QFileDialog.getSaveFileName(self)
        if path[0]:
            with open(path[0]+'.csv', 'w', newline = '') as csvFile:
                writer = csv.writer(csvFile, )
                for fault in self.faults:
                    writer.writerow([fault['number'], fault['catagory'], fault['text'], fault['literal']])

    def getFaultComment(self, program, rung):

        comment = {}

        literal = rung.findall("Comment")

        if literal:
            literal = literal[0].text
            comment['literal'] = literal.split('\n')[2]

            if len(comment['literal'].split(':')) == 2:
                comment['text'] = comment['literal'].split(':')[1]
            elif len(comment['literal'].split(':')) == 3:
                comment['text'] = comment['literal'].split(':')[1] + comment['literal'].split(':')[2]

            name = program.attrib['Name'].split("_")[1]
            mtn = name[:3]
            stn = name[3:]
            if stn == "":
                stn = "G3"
            if mtn[0] == '5':
                loop = "07"
            elif mtn[0] == '6':
                loop = "08"
            elif mtn[0] == '7':
                loop = "09"
            else:
                loop = "10"

            try:
                f = comment['text'][1:].find(" ") + 1

                sensor = comment['text'][1:f]

                comment['text'] = comment['text'][f:]

                comment['text'] = loop + mtn + "_" + stn + "_" + sensor + ":" + comment['text']
            except:
                comment['text'] = "ERROR: NOT CORRECT FORMAT"

        return comment

    def getFault(self, program, rung):
        fault = {   'number'    : "",
                    'catagory'  : "",
                    'text'      : "",
                    'literal'   : ""}

        textElement = str(rung.findall("Text")[0].text)

        f = textElement.find("AOI_Fault_Set_Reset")
        if f == -1:
            return False

        textElement = textElement[f:]
        p = textElement.find(')')
        textElement = textElement[:p].split(',')[2:4]
        fault['number'] = int(textElement[0])
        fault['catagory'] = textElement[1]

        fault.update(self.getFaultComment(program, rung))

        return fault

    def genEmptyFaults(self, faults):
        emptyfaults = []
        for i in list(range(1000)):
            fault = {   'number'    : i,
                        'catagory'  : "",
                        'text'      : "",
                        'literal'   : ""}

            emptyfaults.append(fault)
        
        duplicates = []
        for fault in faults:
            if emptyfaults[fault['number']]['catagory'] == "":
                emptyfaults[fault['number']] = fault
            else:
                duplicates.append(fault)

        for fault in duplicates:
            emptyfaults.insert(fault['number'], fault)

        return emptyfaults

    def catagoryFix(self, fault):
        if fault['catagory'].find("Warning") != -1:
            fault['catagory'] = "M"
        elif fault['catagory'].find("Stop") != -1:
            fault['catagory'] = "C"
        elif fault['catagory'].find("Abort") != -1:
            fault['catagory'] = "I"
        return fault
    
    def numberFix(self, fault):
        n = str(fault['number'])
        if len(n) == 1:
            fault['number'] = "Fault_00" + n
        if len(n) == 2:
            fault['number'] = "Fault_0" + n
        if len(n) == 3:
            fault['number'] = "Fault_" + n
        if fault['text'] == "":
            fault['text'] = fault['number']
        return fault

    def fix100(self):
        if not self.fix100Button.isChecked():
            self.treewidget.clear()
            self.textFix100(False)
            self.draw()
            self.colorFix100(False)
            self.hideButton.setChecked(False)

        else:
            self.treewidget.clear()
            self.textFix100(True)
            self.draw()
            self.colorFix100(True)
            self.hideButton.setChecked(True)

        self.highlightButton.setChecked(False)
        self.hideButton.setChecked(False)

    def draw(self):
        for d in self.faults:
            item = QTreeWidgetItem(self.treewidget)
            item.setText(0, d['number'])
            item.setText(1, d['catagory'])
            if "text" in d:
                item.setText(2, d['text'])
            if "literal" in d:
                item.setText(3, d['literal'])
        for i in range(4):
            self.treewidget.resizeColumnToContents(i)

    def textFix100(self, forwards):
        if forwards:
            self.faults[31]['text'] = self.faults[31]['text'].replace("G6","G5")
            self.faults[32]['text'] = self.faults[32]['text'].replace("G6","G5")
            self.faults[34]['text'] = self.faults[34]['text'].replace("G6","G5")
            self.faults[35]['text'] = self.faults[35]['text'].replace("G6","G4")
            self.faults[40]['text'] = self.faults[40]['text'].replace("G6","G5")
            self.faults[70]['text'] = self.faults[70]['text'].replace("G9","G3")
            self.faults[71]['text'] = self.faults[71]['text'].replace("G9","G3")

        else:
            self.faults[31]['text'] = self.faults[31]['text'].replace("G5","G6")
            self.faults[32]['text'] = self.faults[32]['text'].replace("G5","G6")
            self.faults[34]['text'] = self.faults[34]['text'].replace("G5","G6")
            self.faults[35]['text'] = self.faults[35]['text'].replace("G4","G6")
            self.faults[40]['text'] = self.faults[40]['text'].replace("G5","G6")
            self.faults[70]['text'] = self.faults[70]['text'].replace("G3","G9")
            self.faults[71]['text'] = self.faults[71]['text'].replace("G3","G9")

    def colorFix100(self, color):
        children = []
        root = self.treewidget.invisibleRootItem()
        children.append(root.child(31))
        children.append(root.child(32))
        children.append(root.child(34))
        children.append(root.child(35))
        children.append(root.child(40))
        children.append(root.child(70))
        children.append(root.child(71))

        for child in children:
            if color:
                child.setBackground(2, Qt.green)
            else:
                child.setBackground(2, Qt.white)

app = QApplication(sys.argv)

masterView = faultViewer()

sys.exit(app.exec_())
