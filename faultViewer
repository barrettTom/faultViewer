#!/usr/bin/python3

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QMainWindow, QAction, QFileDialog, QTreeView, QHeaderView
import csv
import sys

from lib.TreeModel import TreeModel

class faultViewer(QMainWindow):
    def __init__(self):
        super().__init__()
        
        self.menuInit()

        self.view = QTreeView(self)
        self.setCentralWidget(self.view)
        self.view.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.view.setAlternatingRowColors(True)
        self.model = False

        if len(sys.argv) == 2:
            self.open(sys.argv[1])

        self.show()

    def menuInit(self):
        menu = self.menuBar()
        fileMenu = menu.addMenu('&File')
        openButton = QAction('&Open', self)
        openButton.triggered.connect(self.open)
        fileMenu.addAction(openButton)

        exportButton = QAction('&Export CSV', self)
        exportButton.triggered.connect(self.export)
        fileMenu.addAction(exportButton)

        viewMenu = menu.addMenu('&View')
        self.hideButton = QAction('&Hide Generated', self)
        self.hideButton.setEnabled(False)
        self.hideButton.setCheckable(True)
        self.hideButton.triggered.connect(self.hide)
        viewMenu.addAction(self.hideButton)

        self.highlightButton = QAction('&Highlight Duplicates', self)
        self.highlightButton.setEnabled(False)
        self.highlightButton.setCheckable(True)
        self.highlightButton.triggered.connect(self.highlight)
        viewMenu.addAction(self.highlightButton)

        self.fix100Button = QAction('&Fix first 100', self)
        self.fix100Button.setEnabled(False)
        self.fix100Button.setCheckable(True)
        self.fix100Button.triggered.connect(self.fix100)
        viewMenu.addAction(self.fix100Button)

    def open(self, f = None):
        if not f:
            path = QFileDialog.getOpenFileName(self)[0]
        else:
            path = f

        if path:
            self.model = TreeModel(path)
            self.view.setModel(self.model)

        self.hideButton.setEnabled(True)
        self.highlightButton.setEnabled(True)
        self.fix100Button.setEnabled(True)

    def export(self):
        path = QFileDialog.getSaveFileName(self)
        if path[0]:
            with open(path[0]+'.csv', 'w', newline = '') as csvFile:
                writer = csv.writer(csvFile, )
                for fault in self.faults:
                    writer.writerow([fault['number'], fault['catagory'], fault['text'], fault['literal']])

    def highlight(self):
        print("highlighting")

    def hide(self):
        print("hiding")

    def fix100(self):
        print("fixing")

app = QApplication(sys.argv)

masterView = faultViewer()

sys.exit(app.exec_())
